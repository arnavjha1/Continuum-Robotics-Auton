{"mode":"Text","hardwareTarget":"brain","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor leftMotorA = motor(PORT14, ratio6_1, true);\nmotor leftMotorB = motor(PORT19, ratio6_1, true);\nmotor_group LeftDriveSmart = motor_group(leftMotorA, leftMotorB);\nmotor rightMotorA = motor(PORT15, ratio6_1, false);\nmotor rightMotorB = motor(PORT16, ratio6_1, false);\nmotor_group RightDriveSmart = motor_group(rightMotorA, rightMotorB);\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 299.24, 295, 40, mm, 0.6666666666666666);\n\nmotor Intake = motor(PORT6, ratio18_1, false);\n\ndigital_out MogoPneu = digital_out(Brain.ThreeWirePort.A);\ncontroller Controller1 = controller(primary);\nmotor LeftBack = motor(PORT20, ratio6_1, true);\n\nmotor RightBack = motor(PORT18, ratio6_1, false);\n\ninertial InertialSensor = inertial(PORT13);\n\n\n\n// generating and setting random seed\nvoid initializeRandomSeed(){\n  int systemTime = Brain.Timer.systemHighResolution();\n  double batteryCurrent = Brain.Battery.current();\n  double batteryVoltage = Brain.Battery.voltage(voltageUnits::mV);\n\n  // Combine these values into a single integer\n  int seed = int(batteryVoltage + batteryCurrent * 100) + systemTime;\n\n  // Set the seed\n  srand(seed);\n}\n\n\n\nvoid vexcodeInit() {\n\n  //Initializing random seed.\n  initializeRandomSeed(); \n}\n\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n// ----------------------------------------------------------------------------\n//                                                                            \n//    Project:                                               \n//    Author:\n//    Created:\n//    Configuration:        \n//                                                                            \n// ----------------------------------------------------------------------------\n\n// Include the V5 Library\n#include \"vex.h\"\n\n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nbool mobilePneu = false;\nvoid spinIntakeForward() {\n  Intake.spin(forward);\n}\nvoid spinIntakeReverse() {\n  Intake.spin(reverse);\n}\nvoid stopIntake() {\n  Intake.stop();\n}\n\nvoid triggerMogoMech() {\n  if (mobilePneu) {\n    MogoPneu.set(false);\n    mobilePneu = false;\n  }\n  else {\n    MogoPneu.set(true);\n    mobilePneu = true;\n  }\n}\n\n// Begin project code\n\nvoid preAuton(void) {\n  leftMotorA.setVelocity(100, percent);\n  leftMotorB.setVelocity(100, percent);\n  LeftBack.setVelocity(100, percent);\n  rightMotorA.setVelocity(100, percent);\n  rightMotorB.setVelocity(100, percent);\n  RightBack.setVelocity(100, percent); \n  \n  leftMotorA.setMaxTorque(100, percent);\n  leftMotorB.setMaxTorque(100, percent);\n  LeftBack.setMaxTorque(100, percent);\n  rightMotorA.setMaxTorque(100, percent);\n  rightMotorB.setMaxTorque(100, percent);\n  RightBack.setMaxTorque(100, percent); \n\n  leftMotorA.setStopping(brake);\n  leftMotorB.setStopping(brake);\n  LeftBack.setStopping(brake);\n  rightMotorA.setStopping(brake);\n  rightMotorB.setStopping(brake);\n  RightBack.setStopping(brake);\n\n  Intake.setStopping(brake);\n  Intake.setMaxTorque(100, percent);\n  Intake.setVelocity(100, percent); \n\n  InertialSensor.calibrate();\n  InertialSensor.setHeading(0, degrees);\n  InertialSensor.setRotation(0, degrees);\n  \n  Controller1.Screen.print(\"Calibrated\");\n}\n\nvoid userControl(void) { \n  // Intake motor: Port 6\n  // Left 1: 14 \n  // Left 2: 19 \n  // Left 3: 20 \n  // Right 1: 15\n  // Right 2: 16\n  // Right 3: 18\n  Controller1.ButtonL1.pressed(spinIntakeForward);\n  Controller1.ButtonL1.released(stopIntake);\n\n  Controller1.ButtonL2.pressed(spinIntakeReverse);\n  Controller1.ButtonL2.released(stopIntake); \n\n  Controller1.ButtonR1.pressed(triggerMogoMech);\n  \n  // place driver control in this while loop\n  double driveSpeed = 0.4;\n  while (true) {\n    int pos = Controller1.Axis1.position()+2;\n    LeftDriveSmart.setVelocity(driveSpeed*(Controller1.Axis3.position()+pos), percent);\n    LeftBack.setVelocity(driveSpeed*(Controller1.Axis3.position()+pos), percent);\n    RightDriveSmart.setVelocity(driveSpeed*(Controller1.Axis3.position()-pos), percent);\n    RightBack.setVelocity(driveSpeed*(Controller1.Axis3.position()-pos), percent);\n    LeftDriveSmart.spin(forward);\n    RightDriveSmart.spin(forward);\n    LeftBack.spin(forward);\n    RightBack.spin(forward);\n\n    wait(5, msec);\n  }\n}\n\nint dist(int start, int end) {\n    start %= 360; end %= 360;\n    int rightDist = 0;\n    int leftDist = 0;\n    if (end < start) {\n        rightDist = 360-start+end;\n    }\n    else {\n        rightDist = end-start;\n    }\n    if (start < end) {\n        leftDist = 360-end+start;\n    }\n    else {\n        leftDist = start-end;\n    }\n    if (leftDist < rightDist) {\n        return -1*leftDist;\n    }\n    return rightDist;\n}\n\nvoid turnPID(int finalPos) {\n  float kp = 0.30;\n  float ki = 0.0;\n  float kd = 0.60;\n\n  float integralActiveZone = 10;\n  float currentSpeed = 0;\n  float totalError;\n  float lastError = 0;\n  float proportion;\n  float integral;\n  float derivative;\n\n  Drivetrain.turn(right);\n\n  while (true) {\n    float error = dist(InertialSensor.heading(), finalPos);\n    if (fabs(error) < 0.5) {\n      break;\n    }\n    if (fabs(error) < integralActiveZone) {\n      totalError += fabs(error);\n    }\n    else {\n      totalError = 0;\n    }\n    if (totalError > 50/ki) {\n      totalError = 50/ki;\n    }\n    proportion = error*kp;\n    integral = totalError*ki;\n    derivative = (fabs(error)-fabs(lastError))*kd;\n\n    lastError = error;\n\n    currentSpeed = proportion+integral+derivative;\n\n    Drivetrain.setTurnVelocity(currentSpeed, percent);\n    wait(5, msec);\n  }\n  Drivetrain.stop();\n}\n\nvoid auton(void) {\n  // Brain.Timer.clear();\n  // turnPID(180);\n  // Controller1.Screen.print(Brain.Timer.time(seconds));\n  // wait(10, seconds);\n  // Controller1.Screen.print(InertialSensor.heading(degrees));\n  Drivetrain.driveFor(reverse, 36, inches);\n  Controller1.Screen.print(InertialSensor.heading(degrees));\n\n}\n\nint main() {\n  // Initializing Robot Configuration. DO NOT REMOVE!\n  vexcodeInit();\n  // create competition instance\n  competition Competition;\n\n  // Set up callbacks for autonomous and driver control periods.\n  Competition.drivercontrol(userControl);\n  Competition.autonomous(auton);\n\n  // Run the pre-autonomous function.\n  preAuton();\n\n  // Prevent main from exiting with an infinite loop.\n  while (true) {\n    wait(100, msec);\n  }\n}","textLanguage":"cpp","robotConfig":[{"port":[14,19,15,16,0],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel325in","gear":"ratio6_1","gearRatio":"2:3","direction":"rev","gyroType":"none","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[6],"name":"Intake","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[1],"name":"MogoPneu","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{},"triportSourcePort":22},{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[20],"name":"LeftBack","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[18],"name":"RightBack","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[13],"name":"InertialSensor","customName":true,"deviceType":"Inertial","deviceClass":"inertial","setting":{"id":"partner"},"triportSourcePort":22}],"slot":4,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.3","minVersion":"3.1.0","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}