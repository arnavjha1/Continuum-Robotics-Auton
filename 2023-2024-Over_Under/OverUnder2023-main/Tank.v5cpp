{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor Catapult = motor(PORT9, ratio36_1, false);\n\nlimit LimitSwitch = limit(Brain.ThreeWirePort.C);\ncontroller Controller1 = controller(primary);\nmotor IntakeMotor = motor(PORT11, ratio6_1, false);\n\ndigital_out IntakePneu = digital_out(Brain.ThreeWirePort.E);\ndigital_out WingPneu = digital_out(Brain.ThreeWirePort.D);\nmotor LeftMotorsMotorA = motor(PORT1, ratio6_1, false);\nmotor LeftMotorsMotorB = motor(PORT12, ratio6_1, false);\nmotor LeftMotorsMotorC = motor(PORT14, ratio6_1, true);\nmotor_group LeftMotors = motor_group(LeftMotorsMotorA, LeftMotorsMotorB, LeftMotorsMotorC);\n\nmotor RightMotorsMotorA = motor(PORT8, ratio6_1, false);\nmotor RightMotorsMotorB = motor(PORT20, ratio6_1, false);\nmotor RightMotorsMotorC = motor(PORT18, ratio6_1, true);\nmotor_group RightMotors = motor_group(RightMotorsMotorA, RightMotorsMotorB, RightMotorsMotorC);\n\n\n\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n/*----------------------------------------------------------------------------*/\n/*                                                                            */\n/*    Module:       main.cpp                                                  */\n/*    Author:       {author}                                                  */\n/*    Created:      {date}                                                    */\n/*    Description:  V5 project                                                */\n/*                                                                            */\n/*----------------------------------------------------------------------------*/\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\nbool isShootingMatchLoads = false;\nint isShooting = false; \nint numTimes = 0;\nbool intakePneuPosition = false;\nbool wingPneuPosition = false;\n\nvoid shootCatapult() {\n  isShooting = false;\n  while (LimitSwitch.pressing()) {\n    Catapult.spin(forward);\n    if (Controller1.ButtonB.pressing()) {\n      isShootingMatchLoads = true;\n    }\n  }\n  wait(0.25, seconds);\n  while (!LimitSwitch.pressing()) {\n    Catapult.spin(forward);\n    if (Controller1.ButtonB.pressing()) {\n      isShootingMatchLoads = true;\n    }\n  }\n  Catapult.stop();\n  isShooting = true;\n}\n\nvoid shootMatchloads() {\n  while (LimitSwitch.pressing()) {\n    Catapult.spin(forward);\n  }\n  wait(0.25, seconds);\n  while (!LimitSwitch.pressing()) {\n    Catapult.spin(forward);\n  }\n  Catapult.stop();\n}\n\nvoid spinIntakeForward() {\n  IntakeMotor.spin(forward);\n}\nvoid spinIntakeReverse() {\n  IntakeMotor.spin(reverse);\n}\nvoid stopIntake() {\n  IntakeMotor.stop();\n}\n\nvoid toggleIntake() {\n  if (intakePneuPosition) {\n    IntakePneu.set(false);\n    intakePneuPosition = false;\n  }\n  else {\n    IntakePneu.set(true);\n    intakePneuPosition = true;\n  }\n  \n}\nvoid toggleWings() {\n  if (wingPneuPosition) {\n    WingPneu.set(false);\n    wingPneuPosition = false;\n  }\n  else {\n    WingPneu.set(true);\n    wingPneuPosition = true;\n  }\n  \n}\nvoid doMatchloads() {\n  Catapult.spin(forward);\n}\nvoid stopMatchloads() {\n  //Catapult.stop();\n  shootCatapult();\n}\n\nint main() {\n  Catapult.setStopping(brake);Catapult.spinToPosition(90, degrees);\n\n  Catapult.setMaxTorque(100, percent);\n  Catapult.setVelocity(80, percent);\n  IntakeMotor.setStopping(brake);\n  IntakeMotor.setMaxTorque(100, percent);\n  IntakeMotor.setVelocity(85, percent);\n  RightMotors.setStopping(brake);\n  LeftMotors.setStopping(brake);\n  RightMotors.setVelocity(100, percent);\n  LeftMotors.setVelocity(100, percent);\n  RightMotors.setMaxTorque(100, percent);\n  LeftMotors.setMaxTorque(100, percent);\n  \n  if (!isShooting) {\n    Controller1.ButtonR2.pressed(shootCatapult);\n  }\n\n  Controller1.ButtonL1.pressed(spinIntakeForward); \n  Controller1.ButtonL1.released(stopIntake); \n  Controller1.ButtonL2.pressed(spinIntakeReverse); \n  Controller1.ButtonL2.released(stopIntake); \n  IntakePneu.set(true);\n  Controller1.ButtonUp.pressed(toggleIntake);\n  WingPneu.set(true);\n  Controller1.ButtonLeft.pressed(toggleWings);\n  Controller1.ButtonB.pressed(doMatchloads);\n  Controller1.ButtonB.released(stopMatchloads);\n  \n  int driveSpeed = 1;\n  while (true) {\n    LeftMotors.setVelocity(driveSpeed*Controller1.Axis3.position(), percent);\n    RightMotors.setVelocity(driveSpeed*Controller1.Axis2.position(), percent);\n    LeftMotors.spin(reverse);\n    RightMotors.spin(forward);\n\n    wait(5, msec);\n  }\n}","textLanguage":"cpp","rconfig":[{"port":[9],"name":"Catapult","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio36_1"},"triportSourcePort":22},{"port":[3],"name":"LimitSwitch","customName":true,"deviceType":"LimitSwitch","deviceClass":"limit","setting":{},"triportSourcePort":22},{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[11],"name":"IntakeMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[5],"name":"IntakePneu","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[4],"name":"WingPneu","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[1,12],"name":"LeftMotors","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio6_1","motor_a_reversed":"false","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[8,20],"name":"RightMotors","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio6_1","motor_a_reversed":"false","motor_b_reversed":"false"},"triportSourcePort":22}],"slot":3,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.3","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}