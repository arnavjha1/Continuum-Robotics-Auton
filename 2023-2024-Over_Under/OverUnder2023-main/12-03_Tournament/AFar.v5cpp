{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor Intake = motor(PORT11, ratio6_1, false);\n\ndigital_out WingPneu = digital_out(Brain.ThreeWirePort.D);\ndigital_out IntakePneu = digital_out(Brain.ThreeWirePort.E);\nlimit LimitSwitch = limit(Brain.ThreeWirePort.C);\nmotor Catapult = motor(PORT9, ratio36_1, false);\n\nmotor leftMotorC = motor(PORT14, ratio6_1, true);\n\nmotor rightMotorC = motor(PORT18, ratio6_1, false);\n\nmotor leftMotorA = motor(PORT1, ratio6_1, true);\nmotor leftMotorB = motor(PORT12, ratio6_1, true);\nmotor_group LeftDriveSmart = motor_group(leftMotorA, leftMotorB);\nmotor rightMotorA = motor(PORT8, ratio6_1, false);\nmotor rightMotorB = motor(PORT20, ratio6_1, false);\nmotor_group RightDriveSmart = motor_group(rightMotorA, rightMotorB);\ninertial DrivetrainInertial = inertial(PORT13);\nsmartdrive Drivetrain = smartdrive(LeftDriveSmart, RightDriveSmart, DrivetrainInertial, 319.19, 320, 40, mm, 0.6666666666666666);\n\ncontroller Controller1 = controller(primary);\ndigital_out EndgamePneu = digital_out(Brain.ThreeWirePort.F);\n\nvoid calibrateDrivetrain() {\n  wait(200, msec);\n  Brain.Screen.print(\"Calibrating\");\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"Inertial\");\n  DrivetrainInertial.calibrate();\n  while (DrivetrainInertial.isCalibrating()) {\n    wait(25, msec);\n  }\n\n  // Clears the screen and returns the cursor to row 1, column 1.\n  Brain.Screen.clearScreen();\n  Brain.Screen.setCursor(1, 1);\n}\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool DrivetrainLNeedsToBeStopped_Controller1 = true;\nbool DrivetrainRNeedsToBeStopped_Controller1 = true;\n\n// define a task that will handle monitoring inputs from Controller1\nint rc_auto_loop_function_Controller1() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      // stop the motors if the brain is calibrating\n      if (DrivetrainInertial.isCalibrating()) {\n        LeftDriveSmart.stop();\n        RightDriveSmart.stop();\n        while (DrivetrainInertial.isCalibrating()) {\n          wait(25, msec);\n        }\n      }\n      \n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = Axis3\n      // right = Axis2\n      int drivetrainLeftSideSpeed = Controller1.Axis3.position();\n      int drivetrainRightSideSpeed = Controller1.Axis2.position();\n      \n      // check if the value is inside of the deadband range\n      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {\n        // check if the left motor has already been stopped\n        if (DrivetrainLNeedsToBeStopped_Controller1) {\n          // stop the left drive motor\n          LeftDriveSmart.stop();\n          // tell the code that the left motor has been stopped\n          DrivetrainLNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range\n        DrivetrainLNeedsToBeStopped_Controller1 = true;\n      }\n      // check if the value is inside of the deadband range\n      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {\n        // check if the right motor has already been stopped\n        if (DrivetrainRNeedsToBeStopped_Controller1) {\n          // stop the right drive motor\n          RightDriveSmart.stop();\n          // tell the code that the right motor has been stopped\n          DrivetrainRNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range\n        DrivetrainRNeedsToBeStopped_Controller1 = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainLNeedsToBeStopped_Controller1) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainRNeedsToBeStopped_Controller1) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller1(rc_auto_loop_function_Controller1);\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n// ----------------------------------------------------------------------------\n//                                                                            \n//    Project: 1258V Alliance Routines                                            \n//    Author: Anshul Raghav\n//    Created: Nov 12 2023\n//    Configuration:        \n//                                                                            \n// ----------------------------------------------------------------------------\n\n// Include the V5 Library\n#include \"vex.h\"\n\n// Allows for easier use of the VEX Library\nusing namespace vex;\nbool isShootingMatchLoads = false;\nint isShooting = false;\nbool intakePneuPosition = false;\nbool wingPneuPosition = false;\nfloat proportional, derivative, kd, integral, ki;\n\nvoid shootCatapult() {\n  isShooting = false;\n  while (LimitSwitch.pressing()) {\n    Catapult.spin(forward);\n    if (Controller1.ButtonB.pressing()) {\n      isShootingMatchLoads = true;\n    }\n  }\n  wait(0.25, seconds);\n  while (!LimitSwitch.pressing()) {\n    Catapult.spin(forward);\n    if (Controller1.ButtonB.pressing()) {\n      isShootingMatchLoads = true;\n    }\n  }\n  Catapult.stop();\n  isShooting = true;\n}\n\nvoid shootMatchloads() {\n  while (LimitSwitch.pressing()) {\n    Catapult.spin(forward);\n  }\n  wait(0.25, seconds);\n  while (!LimitSwitch.pressing()) {\n    Catapult.spin(forward);\n  }\n  Catapult.stop();\n}\n\nvoid spinIntakeForward() {\n  Intake.spin(forward);\n}\nvoid spinIntakeReverse() {\n  Intake.spin(reverse);\n}\nvoid stopIntake() {\n  Intake.stop();\n}\n\nvoid toggleIntake() {\n  if (intakePneuPosition) {\n    IntakePneu.set(false);\n    intakePneuPosition = false;\n  }\n  else {\n    IntakePneu.set(true);\n    intakePneuPosition = true;\n  }  \n}\n\nvoid toggleWings() {\n  if (wingPneuPosition) {\n    WingPneu.set(false);\n    wingPneuPosition = false;\n  }\n  else {\n    WingPneu.set(true);\n    wingPneuPosition = true;\n  }\n}\n\nvoid toggleEndgame() {\n  EndgamePneu.set(true);\n}\n\nvoid doMatchloads() {\n  Catapult.spin(forward);\n}\nvoid stopMatchloads() {\n  //Catapult.stop();\n  shootCatapult();\n}\n\n// Begin project code\n\nvoid printScreen(const char *message) {\n\n  Brain.Screen.setFont(mono40);\n  Brain.Screen.setPenColor(white);\n  Brain.Screen.clearScreen();\n  Brain.Screen.setCursor(1, 1);\n  Brain.Screen.print(message);\n  Brain.Screen.newLine();\n}\n\nvoid stopDrivetrain(int numSeconds) {\n  Brain.Timer.clear();\n  waitUntil((Brain.Timer.time(seconds) > numSeconds));\n  Drivetrain.stop();\n}\n\nvoid preAutonomous(void) {\n\n  printScreen(\"Running Pre-Auton\");  \n\n  calibrateDrivetrain();\n\n  Drivetrain.setHeading(0, degrees);\n  Drivetrain.setRotation(0, degrees);\n\n  Catapult.setStopping(brake);\n  Catapult.setMaxTorque(100, percent);\n  Catapult.setVelocity(100, percent);\n  Catapult.spinToPosition(90, degrees);\n\n  Intake.setStopping(brake);\n  Intake.setMaxTorque(100, percent);\n  Intake.setVelocity(85, percent);\n\n  leftMotorA.setVelocity(100, percent);\n  leftMotorB.setVelocity(100, percent);\n  leftMotorC.setVelocity(66.67, percent);\n  rightMotorA.setVelocity(100, percent);\n  rightMotorB.setVelocity(100, percent);\n  rightMotorC.setVelocity(66.67, percent);\n  leftMotorA.setMaxTorque(100, percent);\n  leftMotorB.setMaxTorque(100, percent);\n  leftMotorC.setMaxTorque(100, percent);\n  rightMotorA.setMaxTorque(100, percent);\n  rightMotorB.setMaxTorque(100, percent);\n  rightMotorC.setMaxTorque(100, percent);\n  leftMotorA.setStopping(brake);\n  leftMotorB.setStopping(brake);\n  leftMotorC.setStopping(brake);\n  rightMotorA.setStopping(brake);\n  rightMotorB.setStopping(brake);\n  rightMotorC.setStopping(brake);  \n\n  WingPneu.set(false);\n  IntakePneu.set(false);\n\n  printScreen(\"Pre-Auton Done\");\n\n  wait(1, seconds);\n}\n\nvoid PTurn(double head) {\n  repeat(1) {\n    Drivetrain.setDriveVelocity(derivative, percent);\n    Drivetrain.turnFor(right, (head - Drivetrain.rotation()), degrees, true);\n    derivative = derivative + -10.0;\n    wait(5, msec);\n  }\n  derivative = 100.0;\n}\n\nvoid PStraight(double dist, double velo) {\n  Drivetrain.setDriveVelocity(velo, percent);\n  Drivetrain.driveFor(forward, dist, inches, false);\n  waitUntil((!Drivetrain.isMoving()));\n}\n\nvoid PStraightTime(double time, double velo) {\n  Brain.Timer.clear();\n  Drivetrain.drive(forward);\n  Drivetrain.setDriveVelocity(velo, percent);\n  waitUntil((Brain.Timer.time(seconds) > time));\n  Drivetrain.stop();\n}\n\nvoid frontAuton(void) {\n  Brain.Screen.clearScreen();\n  printScreen(\"Running Auton\");  \n\n  Drivetrain.setRotation(-135, degrees);\n  Intake.setStopping(hold);\n  Intake.setMaxTorque(100, percent);\n  Intake.setVelocity(100, percent);\n  WingPneu.set(true);\n  PStraight(-15, 85);\n  WingPneu.set(false);\n  Drivetrain.turnFor(left, 40, degrees, false);\n  IntakePneu.set(true);\n  wait(1.75, seconds);\n  Drivetrain.stop();\n  PStraightTime(1, -100);\n  PStraight(8, 100); \n  PStraightTime(1, -100);\n  PStraight(8, 100);\n  PStraightTime(1, -100);\n  PStraight(5, 100);\n  PTurn(-135);\n  PStraight(30, 100);\n  PTurn(-90);\n  Intake.spin(reverse);\n  PStraight(28, 100);\n  wait(0.4, seconds);\n  IntakePneu.set(false);\n  Intake.stop();\n}\n\nvoid sideAuton(void) {\n\n  printScreen(\"Running Auton\");  \n\n  Drivetrain.setHeading(0, degrees);\n  Drivetrain.setRotation(0, degrees);\n\n  Catapult.setStopping(brake);  \n  Catapult.setMaxTorque(100, percent);\n  Catapult.setVelocity(80, percent);\n  \n  Intake.setStopping(brake);\n  Intake.setMaxTorque(100, percent);\n  Intake.setVelocity(85, percent);\n\n  WingPneu.set(false);\n  IntakePneu.set(false);\n  PStraight(10, 100);\n  WingPneu.set(true);\n  PStraight(-8, 100);\n  WingPneu.set(false);\n  IntakePneu.set(true);\n  PTurn(-10);\n  PStraight(19, 100);\n  PTurn(-35);\n  Intake.spin(reverse);\n  IntakePneu.set(false);\n  wait(0.25, seconds);\n  PStraightTime(1, 100);\n  PStraight(-5, 100);\n  PStraightTime(1, 100);\n  PStraight(-5, 100);\n  PTurn(0);\n  PStraight(-30, 100);\n  PTurn(45);\n  PStraight(-40, 100);\n}\n\nvoid userControl(void) {\n\n  leftMotorA.setStopping(brake);\n  leftMotorB.setStopping(brake);\n  leftMotorC.setStopping(brake);\n  rightMotorA.setStopping(brake);\n  rightMotorB.setStopping(brake);\n  rightMotorC.setStopping(brake);  \n\n  printScreen(\"Running Driver Control\");  \n    \n  if (!isShooting) {\n    Controller1.ButtonR2.pressed(shootCatapult);\n  }\n\n  Controller1.ButtonL1.pressed(spinIntakeForward); \n  Controller1.ButtonL1.released(stopIntake); \n\n  Controller1.ButtonL2.pressed(spinIntakeReverse);\n  Controller1.ButtonL2.released(stopIntake); \n\n  Controller1.ButtonUp.pressed(toggleIntake);\n  Controller1.ButtonLeft.pressed(toggleWings);\n  Controller1.ButtonRight.pressed(toggleEndgame);\n\n  Controller1.ButtonB.pressed(doMatchloads);\n  Controller1.ButtonB.released(stopMatchloads);\n  \n\n  // place driver control in this while loop\n  int driveSpeed = 1;\n  while (true) {\n    LeftDriveSmart.setVelocity(driveSpeed*Controller1.Axis3.position(), percent);\n    RightDriveSmart.setVelocity(driveSpeed*Controller1.Axis2.position(), percent);\n    leftMotorC.setVelocity(driveSpeed*Controller1.Axis3.position(), percent);\n    rightMotorC.setVelocity(driveSpeed*Controller1.Axis2.position(), percent);\n    LeftDriveSmart.spin(forward);\n    RightDriveSmart.spin(forward);\n    leftMotorC.spin(reverse);\n    rightMotorC.spin(reverse);\n\n    wait(5, msec);\n  }\n}\n\nint main() {\n  // create competition instance\n  competition Competition;\n\n  // Set up callbacks for autonomous and driver control periods.\n  Competition.autonomous(frontAuton);\n  Competition.drivercontrol(userControl);\n\n  // Run the pre-autonomous function.\n  preAutonomous();\n\n  // Prevent main from exiting with an infinite loop.\n  while (true) {\n    wait(100, msec);\n  }\n}","textLanguage":"cpp","rconfig":[{"port":[11],"name":"Intake","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[4],"name":"WingPneu","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{},"triportSourcePort":22},{"port":[5],"name":"IntakePneu","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{},"triportSourcePort":22},{"port":[3],"name":"LimitSwitch","customName":true,"deviceType":"LimitSwitch","deviceClass":"limit","setting":{},"triportSourcePort":22},{"port":[9],"name":"Catapult","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio36_1"},"triportSourcePort":22},{"port":[14],"name":"leftMotorC","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[18],"name":"rightMotorC","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[1,12,8,20,13],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio6_1","gearRatio":"2:3","direction":"rev","gyroType":"inertial","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"tank","id":"primary"},"triportSourcePort":22},{"port":[6],"name":"EndgamePneu","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22}],"slot":1,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}